{"version":3,"file":"react-notion.esm.js","sources":["../src/components/asset.tsx","../src/components/code.tsx","../src/utils.ts","../src/components/page-icon.tsx","../src/components/page-header.tsx","../src/block.tsx","../src/renderer.tsx"],"sourcesContent":["import * as React from \"react\";\nimport { BlockType, ContentValueType, MapImageUrl } from \"../types\";\n\nconst types = [\"video\", \"image\", \"embed\", \"figma\"];\n\nconst Asset: React.FC<{\n  block: BlockType;\n  mapImageUrl: MapImageUrl;\n}> = ({ block, mapImageUrl }) => {\n  const value = block.value as ContentValueType;\n  const type = block.value.type;\n\n  if (!types.includes(type)) {\n    return null;\n  }\n\n  const format = value.format;\n  const {\n    display_source = undefined,\n    block_aspect_ratio = undefined,\n    block_height = 1,\n    block_width = 1\n  } = format ?? {};\n\n  const aspectRatio = block_aspect_ratio || block_height / block_width;\n\n  if (type === \"embed\" || type === \"video\" || type === \"figma\") {\n    return (\n      <div\n        style={{\n          paddingBottom: `${aspectRatio * 100}%`,\n          position: \"relative\"\n        }}\n      >\n        <iframe\n          className=\"notion-image-inset\"\n          src={\n            type === \"figma\" ? value.properties.source[0][0] : display_source\n          }\n        />\n      </div>\n    );\n  }\n\n  if (block.value.type === \"image\") {\n    const src = mapImageUrl(value.properties.source[0][0], block);\n    const caption = value.properties.caption?.[0][0];\n\n    if (block_aspect_ratio) {\n      return (\n        <div\n          style={{\n            paddingBottom: `${aspectRatio * 100}%`,\n            position: \"relative\"\n          }}\n        >\n          <img\n            className=\"notion-image-inset\"\n            alt={caption || \"notion image\"}\n            src={src}\n          />\n        </div>\n      );\n    } else {\n      return <img alt={caption} src={src} />;\n    }\n  }\n\n  return null;\n};\n\nexport default Asset;\n","import * as React from \"react\";\nimport { highlight, languages } from \"prismjs\";\nimport \"prismjs/components/prism-jsx\";\n\nconst Code: React.FC<{ code: string; language: string }> = ({\n  code,\n  language = \"javascript\"\n}) => {\n  const languageL = language.toLowerCase();\n  const prismLanguage = languages[languageL] || languages.javascript;\n\n  const langClass = `language-${language.toLowerCase()}`;\n\n  return (\n    <pre className={`notion-code ${langClass}`}>\n      <code\n        className={langClass}\n        dangerouslySetInnerHTML={{\n          __html: highlight(code, prismLanguage, language)\n        }}\n      />\n    </pre>\n  );\n};\n\nexport default Code;\n","import { DecorationType, BlockMapType, MapImageUrl } from \"./types\";\n\nexport const classNames = (...classes: Array<string | undefined | false>) =>\n  classes.filter(a => !!a).join(\" \");\n\nexport const getTextContent = (text: DecorationType[]) => {\n  return text.reduce((prev, current) => prev + current[0], \"\");\n};\n\nconst groupBlockContent = (blockMap: BlockMapType): string[][] => {\n  const output: string[][] = [];\n\n  let lastType: string | undefined = undefined;\n  let index = -1;\n\n  Object.keys(blockMap).forEach(id => {\n    blockMap[id].value.content?.forEach(blockId => {\n      const blockType = blockMap[blockId]?.value?.type;\n\n      if (blockType && blockType !== lastType) {\n        index++;\n        lastType = blockType;\n        output[index] = [];\n      }\n\n      output[index].push(blockId);\n    });\n\n    lastType = undefined;\n  });\n\n  return output;\n};\n\nexport const getListNumber = (blockId: string, blockMap: BlockMapType) => {\n  const groups = groupBlockContent(blockMap);\n  const group = groups.find(g => g.includes(blockId));\n\n  if (!group) {\n    return;\n  }\n\n  return group.indexOf(blockId) + 1;\n};\n\nexport const defaultMapImageUrl: MapImageUrl = (image = \"\", block) => {\n  const url = new URL(\n    `https://www.notion.so${\n      image.startsWith(\"/image\") ? image : `/image/${encodeURIComponent(image)}`\n    }`\n  );\n\n  if (block && !image.includes(\"/images/page-cover/\")) {\n    const table =\n      block.value.parent_table === \"space\" ? \"block\" : block.value.parent_table;\n    url.searchParams.set(\"table\", table);\n    url.searchParams.set(\"id\", block.value.id);\n    url.searchParams.set(\"cache\", \"v2\");\n  }\n\n  return url.toString();\n};\n\nexport const defaultMapPageUrl = (pageId: string = \"\") => {\n  pageId = pageId.replace(/-/g, \"\");\n\n  return `/${pageId}`;\n};\n","import * as React from \"react\";\nimport {\n  BlockType,\n  PageValueType,\n  BlockValueType,\n  CalloutValueType,\n  MapImageUrl\n} from \"../types\";\nimport { getTextContent, classNames } from \"../utils\";\n\nconst isIconBlock = (\n  value: BlockValueType\n): value is PageValueType | CalloutValueType => {\n  return value.type === \"page\" || value.type === \"callout\";\n};\n\ninterface AssetProps {\n  block: BlockType;\n  mapImageUrl: MapImageUrl;\n  big?: boolean;\n  className?: string;\n}\n\nconst PageIcon: React.FC<AssetProps> = ({\n  block,\n  className,\n  big,\n  mapImageUrl\n}) => {\n  if (!isIconBlock(block.value)) {\n    return null;\n  }\n  const icon = block.value.format?.page_icon;\n  const title = block.value.properties?.title;\n\n  if (icon?.includes(\"http\")) {\n    const url = mapImageUrl(icon, block);\n\n    return (\n      <img\n        className={classNames(\n          className,\n          big ? \"notion-page-icon-cover\" : \"notion-page-icon\"\n        )}\n        src={url}\n        alt={title ? getTextContent(title) : \"Icon\"}\n      />\n    );\n  } else {\n    return (\n      <span\n        className={classNames(\n          className,\n          \"notion-emoji\",\n          big ? \"notion-page-icon-cover\" : \"notion-page-icon\"\n        )}\n        role=\"img\"\n        aria-label={icon}\n      >\n        {icon}\n      </span>\n    );\n  }\n};\n\nexport default PageIcon;\n","import * as React from \"react\";\n\nimport { BlockMapType, MapPageUrl, MapImageUrl } from \"../types\";\nimport PageIcon from \"./page-icon\";\n\ninterface PageHeaderProps {\n  blockMap: BlockMapType;\n  mapPageUrl: MapPageUrl;\n  mapImageUrl: MapImageUrl;\n}\n\nconst PageHeader: React.FC<PageHeaderProps> = ({\n  blockMap,\n  mapPageUrl,\n  mapImageUrl\n}) => {\n  const blockIds = Object.keys(blockMap);\n  const activePageId = blockIds[0];\n\n  if (!activePageId) {\n    return null;\n  }\n\n  const breadcrumbs = [];\n  let currentPageId = activePageId;\n\n  do {\n    const block = blockMap[currentPageId];\n    if (!block || !block.value) {\n      break;\n    }\n\n    const title = block.value.properties?.title[0][0];\n    const icon = (block.value as any).format?.page_icon;\n\n    if (!(title || icon)) {\n      break;\n    }\n\n    breadcrumbs.push({\n      block,\n      active: currentPageId === activePageId,\n      pageId: currentPageId,\n      title,\n      icon\n    });\n\n    const parentId = block.value.parent_id;\n\n    if (!parentId) {\n      break;\n    }\n\n    currentPageId = parentId;\n  } while (true);\n\n  breadcrumbs.reverse();\n\n  return (\n    <header className=\"notion-page-header\">\n      <div className=\"notion-nav-breadcrumbs\">\n        {breadcrumbs.map((breadcrumb, index) => (\n          <React.Fragment key={breadcrumb.pageId}>\n            <a\n              className={`notion-nav-breadcrumb ${\n                breadcrumb.active ? \"notion-nav-breadcrumb-active\" : \"\"\n              }`}\n              href={\n                breadcrumb.active ? undefined : mapPageUrl(breadcrumb.pageId)\n              }\n            >\n              {breadcrumb.icon && (\n                <PageIcon\n                  className=\"notion-nav-icon\"\n                  block={breadcrumb.block}\n                  mapImageUrl={mapImageUrl}\n                />\n              )}\n\n              {breadcrumb.title && (\n                <span className=\"notion-nav-title\">{breadcrumb.title}</span>\n              )}\n            </a>\n\n            {index < breadcrumbs.length - 1 && (\n              <span className=\"notion-nav-spacer\">/</span>\n            )}\n          </React.Fragment>\n        ))}\n      </div>\n    </header>\n  );\n};\n\nexport default PageHeader;\n","import * as React from \"react\";\nimport {\n  DecorationType,\n  BlockType,\n  ContentValueType,\n  BlockMapType,\n  MapPageUrl,\n  MapImageUrl,\n  CustomBlockComponents,\n  BlockValueProp,\n  CustomDecoratorComponents,\n  CustomDecoratorComponentProps\n} from \"./types\";\nimport Asset from \"./components/asset\";\nimport Code from \"./components/code\";\nimport PageIcon from \"./components/page-icon\";\nimport PageHeader from \"./components/page-header\";\nimport { classNames, getTextContent, getListNumber } from \"./utils\";\n\nexport const createRenderChildText = (\n  customDecoratorComponents?: CustomDecoratorComponents\n) => (properties: DecorationType[]) => {\n  return properties?.map(([text, decorations], i) => {\n    if (!decorations) {\n      return <React.Fragment key={i}>{text}</React.Fragment>;\n    }\n\n    return decorations.reduceRight((element, decorator) => {\n      const renderText = () => {\n        switch (decorator[0]) {\n          case \"h\":\n            return (\n              <span key={i} className={`notion-${decorator[1]}`}>\n                {element}\n              </span>\n            );\n          case \"c\":\n            return (\n              <code key={i} className=\"notion-inline-code\">\n                {element}\n              </code>\n            );\n          case \"b\":\n            return <b key={i}>{element}</b>;\n          case \"i\":\n            return <em key={i}>{element}</em>;\n          case \"s\":\n            return <s key={i}>{element}</s>;\n          case \"a\":\n            return (\n              <a className=\"notion-link\" href={decorator[1]} key={i}>\n                {element}\n              </a>\n            );\n\n          default:\n            return <React.Fragment key={i}>{element}</React.Fragment>;\n        }\n      };\n\n      const CustomComponent = customDecoratorComponents?.[decorator[0]];\n\n      if (CustomComponent) {\n        const props = (decorator[1]\n          ? {\n              decoratorValue: decorator[1]\n            }\n          : {}) as CustomDecoratorComponentProps<typeof decorator[0]>;\n\n        return (\n          <CustomComponent\n            key={i}\n            {...(props as any)}\n            renderComponent={renderText}\n          >\n            {text}\n          </CustomComponent>\n        );\n      }\n\n      return renderText();\n    }, <>{text}</>);\n  });\n};\n\ninterface Block {\n  block: BlockType;\n  level: number;\n  blockMap: BlockMapType;\n  mapPageUrl: MapPageUrl;\n  mapImageUrl: MapImageUrl;\n\n  fullPage?: boolean;\n  hideHeader?: boolean;\n  customBlockComponents?: CustomBlockComponents;\n  customDecoratorComponents?: CustomDecoratorComponents;\n}\n\nexport const Block: React.FC<Block> = props => {\n  const {\n    block,\n    children,\n    level,\n    fullPage,\n    hideHeader,\n    blockMap,\n    mapPageUrl,\n    mapImageUrl,\n    customBlockComponents,\n    customDecoratorComponents\n  } = props;\n  const blockValue = block?.value;\n\n  const renderComponent = () => {\n    const renderChildText = createRenderChildText(customDecoratorComponents);\n\n    switch (blockValue?.type) {\n      case \"page\":\n        if (level === 0) {\n          if (fullPage) {\n            if (!blockValue.properties) {\n              return null;\n            }\n\n            const {\n              page_icon,\n              page_cover,\n              page_cover_position,\n              page_full_width,\n              page_small_text\n            } = blockValue.format || {};\n\n            const coverPosition = (1 - (page_cover_position || 0.5)) * 100;\n\n            return (\n              <div className=\"notion\">\n                {!hideHeader && (\n                  <PageHeader\n                    blockMap={blockMap}\n                    mapPageUrl={mapPageUrl}\n                    mapImageUrl={mapImageUrl}\n                  />\n                )}\n                {page_cover && (\n                  <img\n                    src={mapImageUrl(page_cover, block)}\n                    alt={getTextContent(blockValue.properties.title)}\n                    className=\"notion-page-cover\"\n                    style={{\n                      objectPosition: `center ${coverPosition}%`\n                    }}\n                  />\n                )}\n                <main\n                  className={classNames(\n                    \"notion-page\",\n                    !page_cover && \"notion-page-offset\",\n                    page_full_width && \"notion-full-width\",\n                    page_small_text && \"notion-small-text\"\n                  )}\n                >\n                  {page_icon && (\n                    <PageIcon\n                      className={\n                        page_cover ? \"notion-page-icon-offset\" : undefined\n                      }\n                      block={block}\n                      big\n                      mapImageUrl={mapImageUrl}\n                    />\n                  )}\n\n                  <div className=\"notion-title\">\n                    {renderChildText(blockValue.properties.title)}\n                  </div>\n\n                  {children}\n                </main>\n              </div>\n            );\n          } else {\n            return <main className=\"notion\">{children}</main>;\n          }\n        } else {\n          if (!blockValue.properties) return null;\n          return (\n            <a className=\"notion-page-link\" href={mapPageUrl(blockValue.id)}>\n              {blockValue.format && (\n                <div className=\"notion-page-icon\">\n                  <PageIcon block={block} mapImageUrl={mapImageUrl} />\n                </div>\n              )}\n              <div className=\"notion-page-text\">\n                {renderChildText(blockValue.properties.title)}\n              </div>\n            </a>\n          );\n        }\n      case \"header\":\n        if (!blockValue.properties) return null;\n        return (\n          <h1 className=\"notion-h1\">\n            {renderChildText(blockValue.properties.title)}\n          </h1>\n        );\n      case \"sub_header\":\n        if (!blockValue.properties) return null;\n        return (\n          <h2 className=\"notion-h2\">\n            {renderChildText(blockValue.properties.title)}\n          </h2>\n        );\n      case \"sub_sub_header\":\n        if (!blockValue.properties) return null;\n        return (\n          <h3 className=\"notion-h3\">\n            {renderChildText(blockValue.properties.title)}\n          </h3>\n        );\n      case \"divider\":\n        return <hr className=\"notion-hr\" />;\n      case \"text\":\n        if (!blockValue.properties) {\n          return <div className=\"notion-blank\">&nbsp;</div>;\n        }\n        const blockColor = blockValue.format?.block_color;\n        return (\n          <p\n            className={classNames(\n              `notion-text`,\n              blockColor && `notion-${blockColor}`\n            )}\n          >\n            {renderChildText(blockValue.properties.title)}\n          </p>\n        );\n      case \"bulleted_list\":\n      case \"numbered_list\":\n        const wrapList = (content: React.ReactNode, start?: number) =>\n          blockValue.type === \"bulleted_list\" ? (\n            <ul className=\"notion-list notion-list-disc\">{content}</ul>\n          ) : (\n            <ol start={start} className=\"notion-list notion-list-numbered\">\n              {content}\n            </ol>\n          );\n\n        let output: JSX.Element | null = null;\n\n        if (blockValue.content) {\n          output = (\n            <>\n              {blockValue.properties && (\n                <li>{renderChildText(blockValue.properties.title)}</li>\n              )}\n              {wrapList(children)}\n            </>\n          );\n        } else {\n          output = blockValue.properties ? (\n            <li>{renderChildText(blockValue.properties.title)}</li>\n          ) : null;\n        }\n\n        const isTopLevel =\n          block.value.type !== blockMap[block.value.parent_id].value.type;\n        const start = getListNumber(blockValue.id, blockMap);\n\n        return isTopLevel ? wrapList(output, start) : output;\n\n      case \"image\":\n      case \"embed\":\n      case \"figma\":\n      case \"video\":\n        const value = block.value as ContentValueType;\n\n        return (\n          <figure\n            className=\"notion-asset-wrapper\"\n            style={\n              value.format !== undefined\n                ? { width: value.format.block_width }\n                : undefined\n            }\n          >\n            <Asset block={block} mapImageUrl={mapImageUrl} />\n\n            {value.properties.caption && (\n              <figcaption className=\"notion-image-caption\">\n                {renderChildText(value.properties.caption)}\n              </figcaption>\n            )}\n          </figure>\n        );\n      case \"code\": {\n        if (blockValue.properties.title) {\n          const content = blockValue.properties.title[0][0];\n          const language = blockValue.properties.language[0][0];\n          return (\n            <Code\n              key={blockValue.id}\n              language={language || \"\"}\n              code={content}\n            />\n          );\n        }\n        break;\n      }\n      case \"column_list\":\n        return <div className=\"notion-row\">{children}</div>;\n      case \"column\":\n        const spacerWith = 46;\n        const ratio = blockValue.format.column_ratio;\n        const columns = Number((1 / ratio).toFixed(0));\n        const spacerTotalWith = (columns - 1) * spacerWith;\n        const width = `calc((100% - ${spacerTotalWith}px) * ${ratio})`;\n        return (\n          <>\n            <div className=\"notion-column\" style={{ width }}>\n              {children}\n            </div>\n            <div className=\"notion-spacer\" style={{ width: spacerWith }} />\n          </>\n        );\n      case \"quote\":\n        if (!blockValue.properties) return null;\n        return (\n          <blockquote className=\"notion-quote\">\n            {renderChildText(blockValue.properties.title)}\n          </blockquote>\n        );\n      case \"collection_view\":\n        if (!block) return null;\n\n        const collectionView = block?.collection?.types[0];\n\n        return (\n          <div>\n            <h3 className=\"notion-h3\">\n              {renderChildText(block.collection?.title!)}\n            </h3>\n\n            {collectionView?.type === \"table\" && (\n              <div style={{ maxWidth: \"100%\", marginTop: 5 }}>\n                <table className=\"notion-table\">\n                  <thead>\n                    <tr className=\"notion-tr\">\n                      {collectionView.format?.table_properties\n                        ?.filter(p => p.visible)\n                        .map((gp, index) => (\n                          <th\n                            className=\"notion-th\"\n                            key={index}\n                            style={{ minWidth: gp.width }}\n                          >\n                            {block.collection?.schema[gp.property]?.name}\n                          </th>\n                        ))}\n                    </tr>\n                  </thead>\n\n                  <tbody>\n                    {block?.collection?.data.map((row, index) => (\n                      <tr className=\"notion-tr\" key={index}>\n                        {collectionView.format?.table_properties\n                          ?.filter(p => p.visible)\n                          .map((gp, index) => (\n                            <td\n                              key={index}\n                              className={\n                                \"notion-td \" +\n                                (gp.property === \"title\" ? \"notion-bold\" : \"\")\n                              }\n                            >\n                              {\n                                renderChildText(\n                                  row[\n                                    block.collection?.schema[gp.property]?.name!\n                                  ]\n                                )!\n                              }\n                            </td>\n                          ))}\n                      </tr>\n                    ))}\n                  </tbody>\n                </table>\n              </div>\n            )}\n\n            {collectionView?.type === \"gallery\" && (\n              <div className=\"notion-gallery\">\n                {block.collection?.data.map((row, i) => (\n                  <div key={`col-${i}`} className=\"notion-gallery-card\">\n                    <div className=\"notion-gallery-content\">\n                      {collectionView.format?.gallery_properties\n                        ?.filter(p => p.visible)\n                        .map((gp, idx) => (\n                          <p\n                            key={idx + \"item\"}\n                            className={\n                              \"notion-gallery-data \" +\n                              (idx === 0 ? \"is-first\" : \"\")\n                            }\n                          >\n                            {getTextContent(\n                              row[block.collection?.schema[gp.property].name!]\n                            )}\n                          </p>\n                        ))}\n                    </div>\n                  </div>\n                ))}\n              </div>\n            )}\n          </div>\n        );\n      case \"callout\":\n        return (\n          <div\n            className={classNames(\n              \"notion-callout\",\n              blockValue.format.block_color &&\n                `notion-${blockValue.format.block_color}`,\n              blockValue.format.block_color &&\n                `notion-${blockValue.format.block_color}_co`\n            )}\n          >\n            <div>\n              <PageIcon block={block} mapImageUrl={mapImageUrl} />\n            </div>\n            <div className=\"notion-callout-text\">\n              {renderChildText(blockValue.properties.title)}\n            </div>\n          </div>\n        );\n      case \"bookmark\":\n        const link = blockValue.properties.link;\n        const title = blockValue.properties.title ?? link;\n        const description = blockValue.properties.description;\n        const block_color = blockValue.format?.block_color;\n        const bookmark_icon = blockValue.format?.bookmark_icon;\n        const bookmark_cover = blockValue.format?.bookmark_cover;\n\n        return (\n          <div className=\"notion-row\">\n            <a\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n              className={classNames(\n                \"notion-bookmark\",\n                block_color && `notion-${block_color}`\n              )}\n              href={link[0][0]}\n            >\n              <div>\n                <div className=\"notion-bookmark-title\">\n                  {renderChildText(title)}\n                </div>\n                {description && (\n                  <div className=\"notion-bookmark-description\">\n                    {renderChildText(description)}\n                  </div>\n                )}\n\n                <div className=\"notion-bookmark-link\">\n                  {bookmark_icon && (\n                    <img src={bookmark_icon} alt={getTextContent(title)} />\n                  )}\n                  <div>{renderChildText(link)}</div>\n                </div>\n              </div>\n              {bookmark_cover && (\n                <div className=\"notion-bookmark-image\">\n                  <img src={bookmark_cover} alt={getTextContent(title)} />\n                </div>\n              )}\n            </a>\n          </div>\n        );\n      case \"toggle\":\n        return (\n          <details className=\"notion-toggle\">\n            <summary>{renderChildText(blockValue.properties.title)}</summary>\n            <div>{children}</div>\n          </details>\n        );\n      default:\n        if (process.env.NODE_ENV !== \"production\") {\n          console.log(\"Unsupported type \" + block?.value?.type);\n        }\n        return <div />;\n    }\n    return null;\n  };\n\n  // render a custom component first if passed.\n  if (\n    customBlockComponents &&\n    customBlockComponents[blockValue?.type] &&\n    // Do not use custom component for base page block\n    level !== 0\n  ) {\n    const CustomComponent = customBlockComponents[blockValue?.type]!;\n    return (\n      <CustomComponent\n        renderComponent={renderComponent}\n        blockMap={blockMap}\n        blockValue={blockValue as BlockValueProp<typeof blockValue.type>}\n        level={level}\n      >\n        {children}\n      </CustomComponent>\n    );\n  }\n\n  return renderComponent();\n};\n","import React from \"react\";\nimport {\n  BlockMapType,\n  MapPageUrl,\n  MapImageUrl,\n  CustomBlockComponents,\n  CustomDecoratorComponents\n} from \"./types\";\nimport { Block } from \"./block\";\nimport { defaultMapImageUrl, defaultMapPageUrl } from \"./utils\";\n\nexport interface NotionRendererProps {\n  blockMap: BlockMapType;\n  fullPage?: boolean;\n  hideHeader?: boolean;\n  mapPageUrl?: MapPageUrl;\n  mapImageUrl?: MapImageUrl;\n\n  currentId?: string;\n  level?: number;\n  customBlockComponents?: CustomBlockComponents;\n  customDecoratorComponents?: CustomDecoratorComponents;\n}\n\nexport const NotionRenderer: React.FC<NotionRendererProps> = ({\n  level = 0,\n  currentId,\n  mapPageUrl = defaultMapPageUrl,\n  mapImageUrl = defaultMapImageUrl,\n  ...props\n}) => {\n  const { blockMap } = props;\n  const id = currentId || Object.keys(blockMap)[0];\n  const currentBlock = blockMap[id];\n\n  if (!currentBlock) {\n    if (process.env.NODE_ENV !== \"production\") {\n      console.warn(\"error rendering block\", currentId);\n    }\n    return null;\n  }\n\n  return (\n    <Block\n      key={id}\n      level={level}\n      block={currentBlock}\n      mapPageUrl={mapPageUrl}\n      mapImageUrl={mapImageUrl}\n      {...props}\n    >\n      {currentBlock?.value?.content?.map(contentId => (\n        <NotionRenderer\n          key={contentId}\n          currentId={contentId}\n          level={level + 1}\n          mapPageUrl={mapPageUrl}\n          mapImageUrl={mapImageUrl}\n          {...props}\n        />\n      ))}\n    </Block>\n  );\n};\n"],"names":["types","Asset","block","mapImageUrl","value","type","includes","format","display_source","undefined","block_aspect_ratio","block_height","block_width","aspectRatio","React","style","paddingBottom","position","className","src","properties","source","caption","alt","Code","code","language","languageL","toLowerCase","prismLanguage","languages","javascript","langClass","dangerouslySetInnerHTML","__html","highlight","classNames","classes","filter","a","join","getTextContent","text","reduce","prev","current","groupBlockContent","blockMap","output","lastType","index","Object","keys","forEach","id","content","blockId","blockType","push","getListNumber","groups","group","find","g","indexOf","defaultMapImageUrl","image","url","URL","startsWith","encodeURIComponent","table","parent_table","searchParams","set","toString","defaultMapPageUrl","pageId","replace","isIconBlock","PageIcon","big","icon","page_icon","title","role","PageHeader","mapPageUrl","blockIds","activePageId","breadcrumbs","currentPageId","active","parentId","parent_id","reverse","map","breadcrumb","key","href","length","createRenderChildText","customDecoratorComponents","i","decorations","reduceRight","element","decorator","renderText","CustomComponent","props","decoratorValue","renderComponent","Block","children","level","fullPage","hideHeader","customBlockComponents","blockValue","renderChildText","page_cover","page_cover_position","page_full_width","page_small_text","coverPosition","objectPosition","blockColor","block_color","wrapList","start","isTopLevel","width","spacerWith","ratio","column_ratio","columns","Number","toFixed","spacerTotalWith","collectionView","collection","maxWidth","marginTop","table_properties","p","visible","gp","minWidth","schema","property","name","data","row","gallery_properties","idx","link","description","bookmark_icon","bookmark_cover","target","rel","process","env","NODE_ENV","console","log","NotionRenderer","currentId","currentBlock","warn","contentId"],"mappings":"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"}